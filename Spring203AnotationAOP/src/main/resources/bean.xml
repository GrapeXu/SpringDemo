<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 配置Spring创建容器时要扫描的包 支持注解 -->
    <context:component-scan base-package="com.learn"></context:component-scan>

    <!-- 配置Spring开启注解AOP的支持 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

    <!-- 配置Spring的Ioc,把service对象配置进来 用注解 -->
    <!-- 需要增强,加个日志 -->
<!--    <bean id="accountService" class="com.learn.service.impl.AccountServiceImpl">-->

<!--    </bean>-->

    <!-- Spring中基于XML的AOP配置步骤
        1、把通知Bean 也交给Spring管理
        2、使用aop:config标签开始Aop的配置
        3、使用aop:aspect标签表明配置切面
                id属性: 是给切面提供一个唯一标识
                ref属性: 是指定通知类bean的Id
        4、在aop:aspect标签的内部使用对应标签来配置通知的类型
                我们现在 示例 是让printLog方法在切入点方法执行之前执行,所以是前置通知
                aop:before:标识配置前置通知
                    method属性:用于指定Logger类中哪个方法是前置通知
                    pointcut属性:用于指定 切入点表达式 ,该表达式的含义指的是对业务层中 哪些方法 增强
           切入点表达式的写法:
                关键字:execution(表达式)
                表达式:
                    访问修饰符 返回值 包名.包名.包名...类名.方法名(参数列表)
                标准表达式写法:
                    public void com.learn.service.impl.AccountServiceImpl.saveAccount()
                    访问修饰符可以省略
                           void com.learn.service.impl.AccountServiceImpl.saveAccount()
                    返回值可以使用通配符,表示任意返回值
                             *  com.learn.service.impl.AccountServiceImpl.saveAccount()
                    包名可以使用通配符,表示任意包。但是有几级包，就需要写几个*.
                             *   *.   *.     *.     *.AccountServiceImpl.saveAccount()
                    包名可以使用 .. 表示当前包及其子包
                             *                     *..AccountServiceImpl.saveAccount()
                    类名和方法名都可以使用 * 来实现通配
                             *                     *..* . *()
                    参数列表:
                        可以直接写数据类型
                            基本数据类型 直接写 名称  int
                            引用类型 写 包名.类名 java.lang.String
                        可以使用通配符*表示任意类型,但是必须有参数
                        可以使用..表示有无参数均可，有参数可以是任意类型

                全通配写法:
                             * *..*.*(..)
                实际开发中切入点表达式的通常写法
                        切到业务层实现类下的所有方法
                            * com.learn.service.impl.*.*(..)
     -->

    <!-- 配置Logger类 注解 -->
    <!-- 写一个日志的通知 -->
<!--    <bean id="logger" class="com.learn.utils.Logger"></bean>-->

    <!-- 配置AOP -->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 配置切入点表达式-->
<!--                在aop:aspect标签内部 只能在当前切面使用-->
<!--                它还可以卸载aop:aspect外面，此时就变成了所有切面可用,必须写在切面前-->
<!--            &ndash;&gt;-->
<!--        <aop:pointcut id="pt2" expression="execution(public * com.learn.service.impl.*.*(..))"/>-->
<!--        &lt;!&ndash; 配置切面 引用通知 &ndash;&gt;-->
<!--        <aop:aspect id="logAdivce" ref="logger">-->
<!--&lt;!&ndash;            &lt;!&ndash; 前置通知：在切入点方法执行之前执行 &ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;            <aop:before method="beforePrintLog" pointcut="execution(public * com.learn.service.impl.*.*(..))"></aop:before>&ndash;&gt;-->
<!--&lt;!&ndash;            &lt;!&ndash; 后置通知：在切入点方法正常执行之后执行 &ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;            <aop:after-returning method="afterReturnngPrintLog" pointcut="execution(public * com.learn.service.impl.*.*(..))"></aop:after-returning>&ndash;&gt;-->
<!--&lt;!&ndash;            &lt;!&ndash; 异常通知：在切入点方法执行产生异常之后执行 &ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt2"></aop:after-throwing>&ndash;&gt;-->
<!--&lt;!&ndash;            &lt;!&ndash; 最终通知：无论切入点方法是否正常执行它都会在其后面执行 &ndash;&gt;&ndash;&gt;-->
<!--&lt;!&ndash;            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>&ndash;&gt;-->

<!--            &lt;!&ndash; 配置切入点表达式-->
<!--                在aop:aspect标签内部 只能在当前切面使用-->
<!--                它还可以卸载aop:aspect外面，此时就变成了所有切面可用,但必须写在切面前-->
<!--            &ndash;&gt;-->
<!--            <aop:pointcut id="pt1" expression="execution(public * com.learn.service.impl.*.*(..))"/>-->

<!--            &lt;!&ndash; 详细注释 情况logger类中 &ndash;&gt;-->
<!--            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->

</beans>

















